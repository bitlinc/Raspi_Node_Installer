#!/usr/bin/env bash

    ## This script is the first step for running your Bitcoin / LND / Electrum node
    ########################################################################################################################################
        ## It will configure the following - for both mainnet and testnet
        ## Change root password - create  user 'bitcoin' for daemon services to run under 
        ## Set the visible name your Pi on the network - Set boot to GUI - Expand Filesystem - Set Memory Split to 16
        ## Update system and install necessary software packages [apt-get install htop git curl bash-completion jq dphys-swapfile dirmngr]
        ## Provision external drive - format with exFAT - edit fstab for mounting the drive to the file system - mount the drive and set owner 
        ## Create Swap File on external drive to prolong life of the SD card 
        ## Configure Uncomplicated Firewall for Bitcoin - LND - Electrum Personal Server - Electrum Wallet for both mainnet and testnet
        ## Insall fail2ban 
        ## Increate open files limit
    ########################################################################################################################################
### Script Functions
# Hides the output of shell command 
        function suppress () { 
            /bin/rm --force /tmp/suppress.out 2> /dev/null; ${1+"$@"} > /tmp/suppress.out 2>&1 || cat /tmp/suppress.out; /bin/rm /tmp/suppress.out
        }

# Script to run 'su root -c' command in bash function script
        function su_Root {
            local firstArg=$1
            if [ $(type -t $firstArg) = function ]
            then
                    shift && command sudo bash -c "$(declare -f $firstArg);$firstArg $*"
            else
                    command su root -c "$@"
            fi
        } 

# Script to run 'sudo' command in bash function script
        function sudo_Root {
            local firstArg=$1
            if [ $(type -t $firstArg) = function ]
            then
                    shift && command sudo bash -c "$(declare -f $firstArg);$firstArg $*"
            else
                    command sudo "$@"
            fi
        }

## Arguments passed from Pythong GUI Script

# $1 Bitcoin Network either 'mainnet & testnet' - 'mainnet' - 'testnet'
BTCNETWORK=$1
# $2 Run Bitcoin over tor either 'no' - 'yes'
TOR=$2
# Username 
USERNAME=$(whoami)
## User Functions
# This script will download and install only Bitcoin-QT
## The purpose of this script is NOT To create a bitcoin wallet address but to download and install bitcoin just to SYNC the blockchain 
########################################################################################################################################
########################################################################################################################################  
## Initial Block Download functions

function download_Bitcoind_Linux {
    USERNAME=$(whoami)
    su_Root " "
    if  [ "$USERNAME" = pi ] ; then
        echo ""
    else    
        cd /home/"$USERNAME"/Downloads
        wget https://bitcoincore.org/bin/bitcoin-core-0.18.1/bitcoin-0.18.1-x86_64-linux-gnu.tar.gz
        wget https://bitcoincore.org/bin/bitcoin-core-0.18.1/SHA256SUMS.asc
        wget https://bitcoin.org/laanwj-releases.asc
            echo ""
            echo ""
            echo ""
            echo "Bitcoin downloaded successfully - you will have to verify signatures to install"
            echo "*******************************************************************************"
            echo ""
            echo "Verifing the checksum of bitcoin-core-0.18.1/bitcoin-0.18.1-x86_64-linux-gnu.tar.gz"
            echo ""
            sleep 3.0
            echo ""
            echo "Ensure the output lists "OK" after bitcoin-0.18.1..."
            echo "---------------In the middle of the next output below"
            echo "--------------------------------------------------------"
            sleep 2.0
            echo ""
            sha256sum --ignore-missing --check SHA256SUMS.asc
            echo ""
            echo "----------------------------------------------------"
            echo "You can safely ignore any warnings and failures"
            echo ""
            read -p "Press any key to continue as long as the output says "OK" above - or ctrl + z to exit if not"
            echo ""
            echo ""
            echo ""
            echo "Importing the public key of Wladimir J. van der Laan and verify the signed checksum file..."
            echo ""
            sleep 3.0
            echo ""
            gpg --import ./laanwj-releases.asc
            echo ""
            gpg --refresh-keys
            echo ""
            echo ""
            echo "Verifing that the checksums file is PGP signed by the release signing key of Wladimir J. van der Laan"
            echo ""
            sleep 3.0
            gpg --verify SHA256SUMS.asc
            echo ""
            echo "----------------------------------------------------------------------------"
            echo "Primary key fingerprint: 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964 <------ The fingerprint directly above MUST match this one!" 
            echo ""
            echo ""
            echo "Press any key to proceed ONLY if the fingerprint matches and gpg says 'Good signature from Wladimir J. van der Laan'"
            read -p "Type 'ctrl + z' to exit if not"
            echo ""
            echo ""
            echo "We have successfully downloaded Bitcoin Core for Linux and verified the integrity of the the download - next we will install Bitcoin Core"
            echo ""
            echo ""
            sleep 3.0
            echo "--------------------------------"
            echo "Extracting Bitcoin Core binaries"
            echo "--------------------------------"
            echo ""
            echo ""
            sleep 2.0
            cd /home/"$USERNAME"/Downloads
            tar -xvf bitcoin-0.18.1-x86_64-linux-gnu.tar.gz 
            sudo install -m 0755 -o root -g root -t /usr/local/bin bitcoin-0.18.1/bin/*
            echo ""
            echo "    Verify version below as v0.18.1"
            sleep 3.0
            echo ""
            bitcoind --version
            echo ""
            sleep 2.0
            echo "First we will SYNC Bitcoin for testnet - we do this by simply just running the bitcoin core graphical wallet"
            echo ""
            sleep 3.0
            echo ""
            echo "Allow bitcoin core wallet to run 24/7 until the wallet says '100% synced' - in the bottom left hand corner"
            echo ""
            sleep 2.0
            echo "Once bitcoin core wallet is fully synced you must close the application so that bitcoin core wallet for mainnet can sync too"
            echo ""
            sleep 2.0
            echo "Mainnet is a different blockchain then testnet and is ten times the size so this download can take a bit of time"
            echo ""
            sleep 2.0
            echo ""
            echo ""
            sleep 6.0
    fi
    }

function download_Bitcoind_macOS {
    if [ -d /Applications/Bitcoin-Qt.app ]; then
            echo ""
            echo ""
            echo "Bitcoin is already installed on your Mac - checking for existing Bitcoin directory"
            echo ""
            sleep 3.0
            echo "Your Bitcoin directory will NOT be altered - only your Configuration File"          
            sleep 5.0
            echo ""
            echo ""
            sleep 5.0
            mount_macOS_Drive
            install_Tor_macOS
            download_Bitcoin_Config_macOS
            bitcoin_network_choice_Start_function  
    else 
        intro_Start_Bitcoin_QT_macOS
        cd ~/Bitlinc; curl -O https://bitcoincore.org/bin/bitcoin-core-0.18.1/bitcoin-0.18.1-osx.dmg
        cd ~/Bitlinc; curl -O https://bitcoincore.org/bin/bitcoin-core-0.18.1/SHA256SUMS.asc
        cd ~/Bitlinc; curl -O https://bitcoin.org/laanwj-releases.asc
        echo ""
        echo ""
        echo ""
        echo "Bitcoin downloaded successfully - you will have to verify signatures to install"
        echo "*******************************************************************************"
        echo ""
        echo ""
        echo "Verifing the checksum of bitcoin-core-0.18.1/bitcoin-0.18.1-osx.dmg"
        echo ""
        sleep 3.0
        echo ""
        echo "Ensure the output lists "OK" after bitcoin-0.18.1-osx.dmg"
        echo "--------------- Below this line in the middle of the next optput"
        echo "----------------------------------------------------------------"
        shasum -a 256 --check ~/Bitlinc/SHA256SUMS.asc
        echo ""
        echo "----------------------------------------------------"
        echo "You can safely ignore any warnings and failures"
        echo ""
        sleep 3.0
        read -p "Press any key to continue as long as the output says "OK" above - or ctrl + z to exit if not"
        echo ""
        echo ""
        echo ""
        echo "Importing the public key of Wladimir J. van der Laan and verify the signed checksum file..."
        echo ""
        sleep 3.0
        echo ""
        gpg --import ~/Bitlinc/laanwj-releases.asc
        echo ""
        gpg --refresh-keys
        echo ""
        echo ""
        echo "Verifing that the checksums file is PGP signed by the release signing key of Wladimir J. van der Laan"
        echo ""
        sleep 3.0
        gpg --verify SHA256SUMS.asc
        echo ""
        echo "----------------------------------------------------------------------------"
        echo "Primary key fingerprint: 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964 <------ The fingerprint directly above MUST match this one!" 
        echo ""
        echo ""
        echo "Press any key to proceed ONLY if the fingerprint matches and gpg says 'Good signature from Wladimir J. van der Laan'"
        read -p "Type 'ctrl + z' to exit if not"
        echo ""
        echo ""
        echo "We have successfully downloaded Bitcoin Core for macOS and verified the integrity of the the download - next we will install Bitcoin Core"
        echo ""
        echo ""
        sleep 3.0
        echo "---------------------"
        echo "Installing Bitcoin-Qt"
        echo "---------------------"
        echo ""
        echo ""
        echo "Please enter your password to install Bitcoin"
        echo ""
        sleep 2.0
        suppress install_Bitcoin_QT_macOS_Parent
        echo ""
        echo ""
        echo "Installed Bitcoin-QT successfully - next you will provision your dive"
        echo ""
        sleep 4.0
    fi 
 }

# Mount and umount macOS external dive - ask for user input after showing all drive plugged in
function mount_macOS_Drive {
    if [ -d /Volumes/btc_drive/hdd/bitcoin ]; then
        echo ""
        echo "Your drive is already mounted - starting Bitcoin"
        echo ""
        sleep 1.0    
    else
        diskutil list
        echo ""
        read -r -p "Please enter the disk "Identifier" located on the far right that itentifes your external drive - example without the single quotes -> 'disk6' NOT 'disk6s2' `echo $'\n> '`" MACOSDRIVE
        sudo diskutil mountDisk /dev/"$MACOSDRIVE"
        sudo diskutil umount /Volumes/EFI
        echo ""
        sleep 5.0
    fi
 }

# Install Tor on macOS
function install_Tor_macOS {
    TORVERSION=$(tor --version)
        if [ "$TOR" == "Yes" ] && [ "$TORVERSION" != "Tor version 0.4.1.6." ]; then
            echo ""
            echo ""
            echo " Installing / Updating Tor and downloading Tor config file on your macOS machine..."
            echo ""
            sleep 2.0
            suppress brew install tor
            suppress download_Tor_Conf_macOS
            suppress brew services start tor 
        elif [ "$TOR" == "Yes" ] && [ "$TORVERSION" == "Tor version 0.4.1.6." ]; then
            echo ""
            echo ""
            echo "Starting Tor and downloading Tor Config file..."
            echo ""
            echo ""
            sleep 2.0
            suppress download_Tor_Conf_macOS
            suppress brew services start tor
        else 
            echo ""       
            
        fi    
    }

function download_Tor_Conf_macOS {
    rm -rf  /usr/local/etc/tor/torrc
    cd  /usr/local/etc/tor/; wget https://raw.githubusercontent.com/bitlinc/Raspi_Node_Installer/master/torrc
 }

# Download Bitcoin Config File Depending On Tor Choice
function download_Bitcoin_Config_macOS {
    if [ "$TOR" = "Yes" ]; then 
        rm -rf /Volumes/btc_drive/hdd/bitcoin/bitcoin.conf && rm -rf /Volumes/btc_drive/hdd/bitcoin/testnet3/bitcoin.conf 
        cd /Volumes/btc_drive/hdd/bitcoin; wget https://raw.githubusercontent.com/bitlinc/Raspi_Node_Installer/master/bitcoin_macos_tor.conf.txt
        mv /Volumes/btc_drive/hdd/bitcoin/bitcoin_macos_tor.conf.txt /Volumes/btc_drive/hdd/bitcoin/bitcoin.conf
        cp -r /Volumes/btc_drive/hdd/bitcoin/bitcoin.conf /Volumes/btc_drive/hdd/bitcoin/testnet3/bitcoin.conf
    else
        rm -rf /Volumes/btc_drive/hdd/bitcoin/bitcoin.conf && rm -rf /Volumes/btc_drive/hdd/bitcoin/testnet3/bitcoin.conf 
        cd  /Volumes/btc_drive/hdd/bitcoin; wget https://raw.githubusercontent.com/bitlinc/Raspi_Node_Installer/master/bitcoin_macos_clearnet.conf.txt
        mv /Volumes/btc_drive/hdd/bitcoin/bitcoin_macos_clearnet.conf.txt /Volumes/btc_drive/hdd/bitcoin/bitcoin.conf
        cp -r /Volumes/btc_drive/hdd/bitcoin/bitcoin.conf /Volumes/btc_drive/hdd/bitcoin/testnet3/bitcoin.conf
    fi
    }

# Check to see if Bitcoin is install on the macOS Machine and then prceeding with install or running Bitcoin-qt 
function bitcoin_network_choice_Start_function {
    if [ "$BTCNETWORK" == "Mainnet & Testnet" ]; then
            suppress download_Bitcoin_Mainnet_Shortcut_macOS
            suppress download_Bitcoin_Testnet_Shortcut_macOS
            /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt -datadir=/Volumes/btc_drive/hdd/bitcoin 
            /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt -datadir=/Volumes/btc_drive/hdd/bitcoin -testnet 
            sudo diskutil umount /Volumes/btc_drive
            echo ""
            echo ""
            echo ""
            echo "*****************************************************************************"
            echo "Bitcoin's blockchain has been downloaded successfully for testnet and mainnet"
            echo "*****************************************************************************"
            echo ""
            echo ""
            exit  
    elif [ "$BTCNETWORK" == "Mainnet" ]; then
            suppress download_Bitcoin_Mainnet_Shortcut_macOS
            /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt -datadir=/Volumes/btc_drive/hdd/bitcoin
            sudo diskutil umount /Volumes/btc_drive
            echo ""
            echo ""
            echo ""
            echo "**********************************************************************"
            echo "Bitcoin's blockchain has been downloaded successfully for mainnet only"
            echo "**********************************************************************"
            echo ""
            echo ""
            exit 
    elif [ "$BTCNETWORK" == "Testnet" ]; then
            download_Bitcoin_Testnet_Shortcut_macOS
            /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt -datadir=/Volumes/btc_drive/hdd/bitcoin -testnet 
            sudo diskutil umount /Volumes/btc_drive
            echo ""
            echo ""
            echo ""
            echo "**********************************************************************"
            echo "Bitcoin's blockchain has been downloaded successfully for testnet only"
            echo "**********************************************************************"
            echo ""
            echo ""
            exit
    else
            echo ""
    fi
 }


# Intro to starting Bitcoin-QT macOS
function intro_Start_Bitcoin_QT_macOS {
    echo ""
    echo "************************************************************************************************************"
    echo "************************************************************************************************************"
    echo "First we will SYNC Bitcoin for testnet - we do this by simply just running the bitcoin core graphical wallet"
    echo ""
    sleep 3.0
    echo ""
    echo "Allow bitcoin core wallet to run 24/7 until the wallet says '100% synced' - in the bottom left hand corner"
    echo ""
    sleep 3.0
    echo "Once bitcoin core wallet is fully synced you must close the application"
    echo ""
    sleep 3.0
    echo "Mainnet is a different blockchain then testnet and is ten times the size so this download can take a bit of time"
    echo ""
    sleep 3.0
    echo ""
    echo ""
    echo "**********************************"
    echo "Downloading and installing Bitcoin"
    echo "**********************************"
    sleep 6.0 
  }

 # Install Bitcoin-Qt macOS
function install_Bitcoin_QT_macOS {
        cd ~/Bitlinc
        hdiutil attach bitcoin-0.18.1-osx.dmg
        cp -a /Volumes/Bitcoin-Core/Bitcoin-Qt.app /Applications/Bitcoin-Qt.app
        diskutil umount /Volumes/Bitcoin-Core
    }

# Install Bitcoin-Qt macOS
function install_Bitcoin_QT_macOS_Parent {
    su_Root "install_Bitcoin_QT_macOS"
 }

function make_Mount_Point {
    sudo mount /dev/"$LINUXDRIVE" ~/btc_drive
 }

# Creates Mount Point for External Drive Linux
function make_Mount_Point {
    sudo mount /dev/"$LINUXDRIVE" ~/btc_drive
 }

# Creates Mount Point for External Drive Parent function Linux
function make_Mount_Point_Parent {
    make_Mount_Point
 } 

# Creating directory to add the hard disk and set the correct owner - verify the drive is mounted at /home/hdd and set owner as the user 'bitcoin' Linux
function mount_Filesystem {
    USERNAME=$(whoami)
    mkdir /home/"$USERNAME"/btc_drive/hdd  
 }

# Create directory 'bitcoin' on external drive and set the ownership to user 'bitcoin' Linux 
function make_Bitcoin_Directory {
    USERNAME=$(whoami)
    mkdir /home/"$USERNAME"/btc_drive/hdd/bitcoin
 } 

# Verify Filesystem is mounted at /home/hdd Linux
function verify_Mount_AND_Set_Ownership {
    echo ""
    echo "Verify 'Filesystem' on the far left is mounted at '/home/hdd' on the the far right"
    echo "___________________________________________________________________________________"
    USERNAME=$(whoami)
    df /home/"$USERNAME"/btc_drive
    echo ""
    read -p "Press any key to proceed or 'ctrl + z to exit'..."
    }                  

# Unmount external drive Linux
function un_Mount {
    sudo umount -a 
    } 

# Unmount external drive Linux
function un_Mount_Suppress {
    suppress un_Mount 
    } 

# Install Bitcoind and provision drive for a Linux OS
function install_Bitcoin_Linux_OS {
    echo ""
    echo "Confirmed Linux OS"
    echo "Confirmed No Bitcoin directory found on external drive"
    sleep 3.0
    echo ""
    echo ""
    echo "Provisioning your external drive for Bitcoin and downloading Bitcoin Core Wallet so you can sync the full blockchain"
    echo ""
    sleep 2.0
    read -r -p "Enter 'yes' to confirm formatting of your external drive /dev/"$LINUXDRIVE" or ctrl + z to exit `echo $'\n> '`" CONFIRMFORMAT
        if [[ "$CONFIRMFORMAT" = 'yes' || "$CONFIRMFORMAT" = 'Yes' ]]; then
            echo ""
            echo "Formatting your drive"
            echo ""
            un_Mount_Suppress
            echo ""
            sleep 2.0 
            echo ""
            echo ""
            sudo mkfs.exfat /dev/"$LINUXDRIVE"
            echo ""
            echo ""
            echo "Your external drive was created successfully"
            echo ""
            sleep 2.0
        else
            echo ""
            echo "Exiting formatting your drive and exiting install"
            exit
            echo ""
            sleep 2.0
        fi   
    mkdir /home/"$USERNAME"/btc_drive    
    sudo mount /dev/"$LINUXDRIVE" /home/"$USERNAME"/btc_drive
    echo ""
    echo "--------------------------------------------------------------------------------------"
    echo "Please enter your password to mount your external drive to /home/"$USERNAME"/btc_drive"
    echo ""
    echo " This is the location of where the Bitcoins blockchain will be downloaded to"
    echo ""
    echo ""
    sleep 3.5
    su_Root "chown -R "$USERNAME":"$USERNAME" /home/"$USERNAME"/btc_drive"         
    mkdir /home/"$USERNAME"/btc_drive/hdd  
    mkdir /home/"$USERNAME"/btc_drive/hdd/bitcoin
    download_Bitcoind_Linux
    bitcoin-qt -datadir=/home/"$USERNAME"/btc_drive/hdd/bitcoin
    bitcoin-qt -testnet -datadir=/home/"$USERNAME"/btc_drive/hdd/bitcoin
    sudo umount -a 
    echo ""
    echo ""
    echo ""
    echo "**************************************************************************"
    echo "Bitcoin's blockchain has been downloaded completly for testnet and mainnet"
    echo "**************************************************************************"
    echo ""
    echo ""
    exit
    #sudo reboot                
    }

# Install Bitcoind and provision drive for a  macOS
function provision_Drive_macOS {
    echo ""
    echo ""
    echo "Confirmed - macOS operating system"
    echo ""
    sleep 3.0
    echo ""
    echo "-----------------------------------------------------------------------------------------"
    echo "The installer will now verify your external drive does NOT contain a Bitcoin directory..."
    echo "-----------------------------------------------------------------------------------------"
    echo ""
    USERNAME=$(whoami)
    if [ -d /Volumes/btc_drive/hdd/bitcoin ]; then
        echo ""
        echo "Your 'bitcoin' directory already exists on your external drive - Starting Bitcoin-qt" 
        echo ""
        download_Bitcoind_macOS
        #/Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt -datadir=/Volumes/btc_drive/hdd/bitcoin -testnet 
        #/Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt -datadir=/Volumes/btc_drive/hdd/bitcoin
        #sudo diskutil umount /Volumes/btc_drive  
    else 
        echo ""
        echo "Confirmed - There is not a Bitcoin directory found on your external drive external drive"
        echo ""
        echo ""
        echo ""
        sleep 2.0 
        diskutil list
        echo ""
        read -r -p "Please enter the disk "Identifier" located on the far right that itentifes your external drive - example without the single quotes -> 'disk6' NOT 'disk6s2' `echo $'\n> '`" MACOSDRIVE
        echo ""
        sleep 5.0
        echo "Provisioning your external drive for Bitcoin and starting Bitcoin Core Wallet so you can sync the full blockchain"
        echo ""
        sleep 5.0
    fi  
    read -r -p "Enter 'yes' to confirm formatting of your external drive /dev/"$MACOSDRIVE" or ctrl + z to exit `echo $'\n> '`" CONFIRMFORMAT
        if [[ "$CONFIRMFORMAT" = 'yes' || "$CONFIRMFORMAT" = 'Yes' ]]; then
            echo ""
            echo "Formatting your drive"
            echo ""
            sudo diskutil umount /dev/"$MACOSDRIVE"
            echo ""
            echo "Confirm format one more time by entering "y" - make sure you have only ONE external drive connected to your computer"
            echo ""
            diskutil eraseDisk ExFAT btc_drive /dev/"$MACOSDRIVE"
            sudo diskutil mountDisk /dev/"$MACOSDRIVE"
            sudo diskutil umount /Volumes/EFI
            echo ""
            echo ""
            echo "Your external drive was created successfully"
            echo ""
            sleep 2.0
        else
            echo ""
            echo "Exiting Bitcoin Installer completely"
            exit
            echo ""
            sleep 2.0
        fi   
    cd /Volumes/btc_drive
    mkdir /Volumes/btc_drive/hdd
    mkdir /Volumes/btc_drive/hdd/bitcoin             
    echo ""
    echo "----------------------------------------------------------------------------------------------------"
    echo "Mounting Bitcoin-Qt application and setting the blockchain download directory to your external drive"
    echo "----------------------------------------------------------------------------------------------------"
    echo ""
    sleep 3.5
    check_For_Bitcoin_Dir_macOS         
}

# Download Bitcoin Mainnet Shortcut macOS
function download_Bitcoin_Mainnet_Shortcut_macOS {
    USERNAME=$(whoami)
    rm -rf /Users/"$USERNAME"/Desktop/Bitcoin\ Mainnet
    cd /Users/"$USERNAME"/Desktop; wget https://github.com/bitlinc/Raspi_Node_Installer/raw/master/Bitcoin%20Mainnet.zip
    ditto -x -v -k --sequesterRsrc /Users/"$USERNAME"/Desktop/Bitcoin\ Mainnet.zip /Users/"$USERNAME"/Desktop
    #source ~/.bash_profile
    rm -rf /Users/"$USERNAME"/Desktop/Bitcoin\ Mainnet.zip
}

# Download Bitcoin Testnet Shortcut macOS
function download_Bitcoin_Testnet_Shortcut_macOS {
    USERNAME=$(whoami)
    rm -rf /Users/"$USERNAME"/Desktop/Bitcoin\ Testnet
    cd /Users/"$USERNAME"/Desktop; wget https://github.com/bitlinc/Raspi_Node_Installer/raw/master/Bitcoin%20Testnet.zip
    ditto -x -v -k --sequesterRsrc /Users/"$USERNAME"/Desktop/Bitcoin\ Testnet.zip /Users/"$USERNAME"/Desktop
    #source ~/.bash_profile
    rm -rf /Users/"$USERNAME"/Desktop/Bitcoin\ Testnet.zip
}

# Install Bitcoin depending on OS 
function install_Bitcoin_For_macOS_Or_Linux {
    USERNAME=$(whoami)
    if  [ "$USERNAME" = pi ] ; then
        echo ""
    else
        case "$OSTYPE" in
            darwin*)  provision_Drive_macOS ;;
            linux*)   install_Bitcoin_Linux_OS ;;
            msys*)    echo "This Bitcoin install script isn't configured for use with Windows yet" ;;
            *)        echo "unknown: $OSTYPE" ;;
        esac 
    fi      
}

# Install All Functions
function install_all_Linux {
        make_Mount_Point
        make_Mount_Point_Parent
        make_Bitcoin_Directory
        verify_Mount_AND_Set_Ownership
        un_Mount
        un_Mount_Suppress
                
}

case "$OSTYPE" in
        darwin*)  download_Bitcoind_macOS ;;
        linux*)   download_Bitcoind_Linux ;;
        msys*)    echo "This Bitcoin install script isn't configured for use with Windows yet" ;;
        *)        echo "unknown: $OSTYPE" ;;
    esac

install_Bitcoin_For_macOS_Or_Linux 

